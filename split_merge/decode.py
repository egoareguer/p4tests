#!/usr/bin/env python

from scipy import log

# We have four+ registers of size REGISTERS_SIZE
# Each entry is a bitmap
# Their count is ~ bitwidth*ln(bitwidth/Z), where Z is the number of zeroes

# Right now we feed a given distribution with spam.py, get the registers, feed them to decode.py as a reg variable, and observe the difference. 
# It works, but should be automated. TODO!

reg=[ 1, 4194304, 292733975779082240, 8458240, 1225014283016863776, 18014673454505984, 720575940652433408, 4503677071523872, 560526950532, 2377900622109245445, 328797965782220802, 31526301198222336, 13513032802518016, 648521131401216016, 3518442008281100, 1302850927653291016, 72308360034159632, 153122548224098586, 167759087562656513, 1171244179766378905, 2882902589565441076, 2613074085002440784, 132859126801244169, 191985502346286144, 51810363297187098, 3616486718196224640, 24779153197998325, 194317340161094664, 1810514276507535361, 3122780303380236433, 2393552361894785863, 1892570568654496291, 3895149375651530384, 1014551857628046283, 2306535229843157779, 1046253836051823028, 2891322674525944566, 3855421111164981783, 3347617533952809960, 2746073420009794150, 939296169145386692, 352624290672677175, 2785724224941369490, 1765091658289916115, 1117967273619383805, 4066388317962549624, 1864083599145945753, 279032250712030684, 3744228228316260080, 3732461430368100485, 751876727146471353, 4183640951903608975, 3487982707778713406, 1882644865224714010, 2002130545609752326, 1434033638674422922, 789488677028340402, 3141978987233137359, 4564323166070375932, 3977482258627023735, 3303379159262488510, 1760328990502673361, 2287484829542642561, 4575156663901446055, 3871927695236196850, 4551010550396605806, 4212931839824158554, 2085008134315670335, 4178720243671353326, 4308724814945623548, 3332590881553235126, 4529762007502553053, 2187614719239345149, 2769113411584114557, 502982176503494527, 4602324420473970943, 4463062232973123067, 3863905411556929399, 3922070454964387839, 3165671898289485823, 4389848542586077148, 4032819261951966707, 3386138128302460903, 4464606190369753819, 4033956428580454271, 4488962891805218815, 1827029038443001279, 4272473482488174491, 4573396625425733449, 1943232800630984189, 4035213925262417115, 3868570078302633471, 4590786492207849463, 2271993989682822906, 4312050803163262782, 4321164259906027263, 432203589754650365, 1872089786600636317, 2305420504151341023, 2719171381668339567, 4321841266325534697, 1149860463966355445, 4611685417098411983, 4233381441845853917, 4539623989835553911, 3314647882632887551, 1729082897689738559, 2296619996425486335, 4592826885750079486, 4466686272001269739, 2697620983815864319, 4574742426625728511, 4035211786033553150, 3453557190778745847, 4539505238274456319, 4593108395069691645, 4539626620502605820, 2301269039223009271, 4602661225912598527, 4035189523406126079, 146718840267670656, ]

def count_zeroes(n):		# fun : int -> int. When fed N, returns Z=how many zeroes are in its binary form
	res=0
	bn=bin(n)[2:]
	for i in bn:
		if int(i)==0:
			res=res+1
	res=res+63-len(bn)
	return(res)

counts=[]
bins=[]
bitwidth=63					# Bitmaps' size parameter
for port in range(len(reg)):					# Every entry corresponds to a dstPort with its own bitmap. 
	bins.append(bin(abs(reg[port]))[2:])
	sum=0
	Z=count_zeroes(abs(reg[port]))
	if Z!=0:
		sum=sum+bitwidth*log(float(bitwidth)/Z)	
		X=bitwidth-Z
	counts.append(sum)
	if reg[port]!=0:
		indice=port; collisions=port-X
		print('%03d' %port, \
			  "collisions="+'{0:< 2d}'.format(collisions)+ \
			  '  est='+'{0:>8.2f}'.format(counts[-1])+ \
			  '  dif='+'{0:>8.2f}'.format(port-counts[-1])+ \
			  '  rel='+'{0:>7.3f}'.format(100*(port-counts[-1])/port)+'%'+ \
			  '{0:63d}' .format(int(bins[-1])))
#		 '{0:> 12,.2f}'.format(-e)
