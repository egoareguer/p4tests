#!/usr/bin/env python

from scipy import log

# We have four+ registers of size REGISTERS_SIZE
# Each entry is a bitmap
# Their count is ~ bitwidth*ln(bitwidth/Z), where Z is the number of zeroes

# Right now we feed a given distribution with spam.py, get the registers, feed them to decode.py as a reg variable, and observe the difference. 
# It works, but should be automated. TODO!

reg=[ 1, 2048, 75497472, 4295491712, 180145084606447617, 1152921556147505152, 290314019538944, 2273858774130688, 72621094485362688, 595602150239768849, 2486691368945124368, 756745500933231112, 1450159080902525061, 648632729978683652, 362544791021564416, 4197953331848544259, 18656524057067864, 147653533087371280, 29415518208266344, 766315624581597268, 1163072236119140000, 2607973707775283816, 4036422120027241824, 2603230000660365584, 576511410084255092, 648731491878192655, 2311459371416073408, 378514564265820608, 1603776820965639461, 157124065286429541, 76711186233444366, 2324625029516993313, 2360907823179608910, 4144725464464519938, 2389830893718289537, 1827479819504792736, 1749491896481233428, 337301082471872980, 4299821253566439864, 2634952606520680706, 3136712869558258496, 1995256891714872445, 1544228238200688911, 2867852348253200538, 4184925889229230971, 3676007566143462007, 4557894221935863750, 1868855775502994303, 3503366545649089992, 3907339088615688762, 143962054623603282, 3100562702172294899, 3677948750745787896, 987059888478330517, 4436267930588063223, 3942242483750927805, 1330713879007616915, 503980543355861591, 3356792899031069108, 4465384627485233579, 4217444420925973587, 2177226394397829967, 3241886924166538647, 1584623844612306409, 1071503759034460327, 3942548388863179231, 2253306487549476791, 4124159001069306649, 4455988643541402431, 4430090952649250803, 4191547190045645053, 3953508434761461759, 1006270258325289650, 3454960201237355187, 1255307477557526319, 4589097094261761645, 4610366031282102031, 2142235524326718871, 1963265315060054007, 3583518117973570295, 1151785637683001180, 2161610085346432698, 1102198262695159759, 2269228651263885239, 4417143789907344595, 3925800762490855389, 2819234947766678430, 2304923783115202547, 4498460368145153954, 4034928396631754494, 2301304207966075863, 4467548263080262385, 4031138376961555966, 3456508304684989750, 3420304144650991595, 3430441091839354620, 864688374838902704, 1715721786402782654, 4609150538808819583, 4607041127239876327, 3453978889459456990, 4611602110872088063, 4177087000685309629, 4467007781211176956, 1549009285598543851, 4593459412831404029, 3440697334256629611, 3386283287830191615, 4611650695537847244, 3456482339996024823, 4318879328581320693, 4609117368136662719, 4035082319862628349, 4017156716577947517, 2305244874888017503, 4566368547039935487, 4538075905363246719, 2305701713362518015, 4611510059937562607, 4611648458936287223, 4034098266546099197, 4611684643901341693, 4280529591031726047, 4571152505087981560, 1692790232912486351, 3458745821585700863, 4458563631029682162, 4575655022385167865, 4602532979263131647, 2304717107677888511, 3449737517945585647, 2304673128304606719, 4322186788677353455, 4467277260134543339, 4611682684458745855, 4566632429883678207, 2268405737799547903, 2048512752447455231]

def count_zeroes(n):		# fun : int -> int. When fed N, returns Z=how many zeroes are in its binary form
	res=0
	bn=bin(n)[2:]
	for i in bn:
		if int(i)==0:
			res=res+1
	res=res+63-len(bn)
	return(res)

counts=[]
bins=[]
bitwidth=63					# Bitmaps' size parameter
for port in range(len(reg)):					# Every entry corresponds to a dstPort with its own bitmap. 
	bins.append(bin(abs(reg[port]))[2:])
	sum=0
	Z=count_zeroes(abs(reg[port]))
	if Z!=0:
		sum=sum+bitwidth*log(float(bitwidth)/Z)	
		X=bitwidth-Z
	counts.append(sum)
	if reg[port]!=0:
		indice=port; collisions=port-X
		print('%03d' %port, \
			  "collisions="+'{0:< 2d}'.format(collisions)+ \
			  '  est='+'{0:>8.2f}'.format(counts[-1])+ \
			  '  dif='+'{0:>8.2f}'.format(port-counts[-1])+ \
			  '  rel='+'{0:>7.3f}'.format(100*(port-counts[-1])/port)+'%'+ \
			  '{0:63d}' .format(int(bins[-1])))
#		 '{0:> 12,.2f}'.format(-e)
