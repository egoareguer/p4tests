#!/usr/bin/python

#Note: watch out for p4 endianess

#We have K pairs of tables corresponding to (Key,Count) tuples to decode. Key is the concatenation of the the different features used to calculate the hash. Count doesn't need touching up.
#We'd like to only have the most noticeable ones, ie those for whom count exceed THRESHOLD.
#Therefore, we sort count while keeping the correspondance with key, and cull those under threshold
#Then we decode
#Then we join those of the same key if necessary

#source a file with the registers written as rKeyX=[], rValX=[] and the IPs written as cX= []

def int_to_sbin(integ): # int -> string function. Return the binary string of a decimal int
	#Takes i, return its a string of its value in binary
	if (integ<=1):
		return(str(integ&1))
	else:
		return(int_to_sbin(integ>>1)+str(integ&1))
def bin_to_int(string): # string -> int function. Returns the decimal value of the binary string
	res=0
	for i in range(len(string)):
		if (int(string[i])!=0):
			res=res+2**(len(string)-1-i)
	return(res)

def decode_ip_port(key,t):
	str_bkey=int_to_sbin(key) #[::-1]
	ip=str_bkey[-32:]
	ip1,ip2,ip3,ip4=ip[:-24],ip[-24:-16],ip[-16:-8],ip[-8:]
	port=str_bkey[:-32]
	if t:
		return(key,bin_to_int(ip1),bin_to_int(ip2),bin_to_int(ip3),bin_to_int(ip4),bin_to_int(port))
	else:
		return(bin_to_int(ip1),bin_to_int(ip2),bin_to_int(ip3),bin_to_int(ip4),bin_to_int(port))

def decode_ip(key):
	str_ip=int_to_sbin(key)
	ip1,ip2,ip3,ip4=str_ip[:-24],str_ip[-24:-16],str_ip[-16:-8],str_ip[-8:]
	return(bin_to_int(ip1),bin_to_int(ip2),bin_to_int(ip3),bin_to_int(ip4))

def chain(key_l):
	res=[]
	for i in range(len(key_l)):
		d=decode_ip_port(key_l[i])
		if (d!=(0,0,0,0,0)):
			res.append(d)
	res.sort()
	print(res)
	return(res)

def paired_sort(l1,l2): #Sort l1 and keep the index correspondance between l1 & l2 intact
	res1,res2=[l1[0]],[l2[0]]
	for i in range(len(l1)-1):
		tmp1,tmp2=l1[i+1],l2[i+1]
		j=0
		while ( tmp1>l1[j] and j < len(res1)):
			j=j+1
		res1=res1[0:j]+[tmp1]+res1[j:]
		res2=res2[0:j]+[tmp2]+res2[j:]
	return(res1,res2)

def paired_cull(l1,l2,threshold): #cull elements below threshold in l1 & corresponding indexes in l2
	amount=0
	for i in range(len(l1)):
		if l1[i] < threshold:
			l1=[l1[i]]+l1[:i]+l1[i+1:]
			amount=amount+1
	l1=l1[amount:]
	l2=l2[amount:]
	return(l1,l2)

	
def main(l):	#Assume a list of paired arrays (countI,keysI)
	for i in l:
		i=paired_sort(i[0],i[1])
		i=paired_cull(i[0],i[1],50)
		for j in range(len(i[1])):
			res=decode_ip_port(i[1][j],True)
			i[1][j]=res
		print(i[0])
		print(i[1])


#250, 200, 150 & 100 packets per ip per class


rVals2=[40, 70, 103, 2, 27, 30, 3, 4, 5, 2, 28, 2, 20, 16, 10, 133, 45, 14, 17, 2, 1, 34, 21, 2, 20, 24, 13, 67, 170, 5, 44, 12, 1, 7, 5, 10, 9, 6, 9, 38, 4, 18, 3, 50, 11, 9, 25, 32, 2, 2, 2, 5, 2, 74, 7, 48, 20, 2, 37, 32, 48, 365, 20, 16, 32, 2, 347, 2, 5, 96, 12, 1, 55, 8, 44, 20, 16, 49, 1, 4, 3, 7, 58, 22, 1, 239, 65, 5, 13, 7, 2, 1, 2, 21, 51, 171, 19, 5, 2, 19, 9, 31, 14, 13, 10, 20, 8, 24, 13, 35, 84, 43, 1, 23, 7, 6, 20, 14, 15, 12, 5, 14, 39, 60, 2, 2, 4, 9, 15, 2, 7, 23, 5, 2, 2, 12, 13, 55, 42, 25, 11, 34, 7, 2, 16, 258, 2, 19, 8, 7, 17, 31, 1, 39, 7, 2, 23, 176, 21, 6, 7, 8, 9, 7, 3, 23, 2, 5, 16, 12, 1, 10, 7, 25, 12, 11, 4, 8, 2, 1, 56, 2, 2, 23, 9, 10, 75, 20, 61, 26, 3, 2, 43, 1, 1, 38, 22, 14, 5, 37, 5, 2, 80, 66, 43, 4, 27, 24, 97, 5, 22, 11, 92, 22, 11, 10, 4, 97, 36, 7, 29, 18, 27, 68, 10, 46, 18, 18, 2, 2, 14, 1, 12, 74, 15, 387, 44, 1, 4, 3, 6, 43, 1, 4, 2, 3, 13, 3, 18, 2, 1, 45, 27, 73, 36, 0]
rKeys2=[208234724119060, 10208996973436, 82020351479433, 75311440539601, 101519008622439, 174433938707724, 158786453507845, 14453995348328, 231232296712424, 115081616315732, 214517568137746, 96335419987018, 196223245625097, 166907994766265, 63503064480566, 236289561716609, 0, 174433938707724, 174433938707724, 74377196738530, 196507825956684, 196223245625097, 272314210931115, 216870444587486, 56786378213675, 254663535590539, 20234402036262, 214517568137746, 206684173923895, 272314210931115, 166907994766265, 272314210931115, 224033689288295, 74377196738530, 272314210931115, 236289561716609, 227694286903099, 239033592353519, 162162298170101, 231232296712424, 236398709845060, 74377196738530, 85618500785272, 208234724119060, 74377196738530, 227694286903099, 54705397115009, 170184017451638, 189846895483786, 51569584712617, 134635222160877, 137818855828156, 154389537724988, 22372831204564, 58480507755012, 174433938707724, 214517568137746, 154296267099997, 56786378213675, 170184017451638, 63503064480566, 110338894136086, 188800598797817, 197159349158840, 231232296712424, 176058414212756, 38532774287438, 274448458524078, 257219734771470, 59734715164717, 120501914464688, 43668601453888, 196223245625097, 119493176019737, 188800598797817, 42802326158750, 254663535590539, 54637836795437, 139253693124237, 236398709845060, 137110326543521, 63503064480566, 158926496046949, 119493176019737, 117933688989611, 188800598797817, 82020351479433, 20234402036262, 51070267719837, 120501914464688, 185709258351158, 43222003532657, 21188030240064, 239033592353519, 197159349158840, 16993267412754, 166907994766265, 208234724119060, 85816592154658, 20234402036262, 141498440268774, 214517568137746, 79546139107933, 120501914464688, 158926496046949, 188800598797817, 242324711272248, 239033592353519, 101519008622439, 261925864352011, 197159349158840, 54637836795437, 81530405663930, 42802326158750, 105854097394812, 170184017451638, 51070267719837, 188800598797817, 158786453507845, 54637836795437, 242324711272248, 54705397115009, 261925864352011, 158926496046949, 185167915303781, 142658154422969, 145017285089608, 272314210931115, 56786378213675, 11111542705610, 227141720121845, 182036269343141, 63503064480566, 194099711981233, 220292055134609, 119493176019737, 120501914464688, 71676428860941, 166907994766265, 79546139107933, 200588357325349, 97272041832092, 119493176019737, 89615655944263, 242324711272248, 236398709845060, 149637152492576, 208234724119060, 227141720121845, 20234402036262, 79546139107933, 166907994766265, 273585523947177, 272314210931115, 236398709845060, 98043536561091, 170184017451638, 235160812495197, 74377196738530, 268367916997502, 200588357325349, 56786378213675, 163379706986139, 75236937122857, 155321723495741, 154188689979577, 259270922894543, 236289561716609, 158926496046949, 268367916997502, 7464011022546, 120501914464688, 254663535590539, 56786378213675, 158786453507845, 74377196738530, 227694286903099, 154188689979577, 174926169393600, 236079116753648, 16993267412754, 243920787674947, 134865721776192, 166907994766265, 265515916879426, 120501914464688, 235160812495197, 154512378875219, 71676428860941, 16993267412754, 73777644424610, 169398027430832, 208234724119060, 43950010460918, 183329207256086, 16993267412754, 196223245625097, 14453995348328, 42836814031682, 42802326158750, 166907994766265, 139762917524768, 71676428860941, 170184017451638, 158926496046949, 166907994766265, 196223245625097, 182036269343141, 254586474663446, 158786453507845, 82020351479433, 20234402036262, 63503064480566, 196223245625097, 82020351479433, 120501914464688, 10185717617270, 22372831204564, 196223245625097, 63503064480566, 261925864352011, 101519008622439, 174433938707724, 54637836795437, 82020351479433, 214517568137746, 16993267412754, 242324711272248, 176357398498481, 105461611772165, 188800598797817, 231439547428931, 74377196738530, 117733146764478, 54637836795437, 169398027430832, 206684173923895, 87361886982327, 63503064480566, 268367916997502, 272314210931115, 54840804709024, 10523630449253, 88352416264779, 62338421938792, 6538788646417, 111979886027516, 119493176019737, 110338894136086, 269746096696156, 149141078697638, 261925864352011, 170184017451638, 206684173923895, 257219734771470, 0]

l=[(rVals2,rKeys2)]
main(l)
